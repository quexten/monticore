/* (c) https://github.com/MontiCore/monticore */

package mc.feature;

grammar ScopesExample extends mc.grammar.lexicals.ItTestLexicals {

    token CHAR = '\'' ( 'a'..'z' | 'A'..'Z' ) '\'';

    token INT = ('0'..'9')+ ;

    token FLOAT =	INT '.' INT;

    token STRING = '"' ('a'..'z' | 'A'..'Z')* '"';

	//a very simplified grammar.
	ClassDefinition =  (public:["public"] | private:["private"] | protected:["protected"])?
	        (final:["final"])?
	        "class" Name ("extends" superclass:Name)? "{"
			body:ClassBody
    "}";

	ClassBody =
		( fields:Field | methods:Method | nestedClasses:ClassDefinition)*;



	Method = (public:["public"] | private:["private"] | protected:["protected"])?
			"method" Name  ("returns" returnType:Name)?  "{"
			body:MethodBody
	  		"}";


	MethodBody =  (fields:Field | assigns:Assignement | increases:Increase | calls:MethodCall)*;


	Field =  (public:["public"] | private:["private"] | protected:["protected"])?
	         "field" type:Name  Name ";";

	//actions are not used at the moment cause classgenwithingrammar cannot generate attributes of any type :(
	Assignement =  varname:Name "=" (value:STRING
										| var:Name
										| bool:"false" {_builder.setType("Boolean");}
										| bool:"true" {_builder.setType("Boolean");}
										| int:INT {_builder.setType("Int");}
										| float:FLOAT {_builder.setType("Float");}
										| call:MethodCall) ";";


	Increase =  varname:Name "+" "+" ";";

	MethodCall= methodName:Name "("  ")" ";";


	//create places for type infos filled while parsing...
	//not used at the moment cause classgenwithingrammar cannot generate attributes of any type :(
	astrule Assignement =
		type:Name;

}
