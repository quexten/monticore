/* (c) https://github.com/MontiCore/monticore */

package mc.feature.attributes;

component grammar TestAttributes extends mc.grammar.lexicals.ItTestLexicals  {

	/**
	 * This concepts consists of AttributeDefinitions and AttributeConcretion
	 *
	 * @attribute AttributeDefinition
	 *                list of all definitions of attributes
	 * @attribute AttributeConcretion
	 *                list of all concretions of attributes
	 */
	ConceptAttributes =
		"{" (attributeDefinition:AttributeDefinition | attributeConcretion:AttributeConcretion)* "}";
	
	astrule ConceptAttributes =
		method public String toString() {
			return " attributes";
		};
     
	/**
	 * A concretion can only be used in a dsltool. It assigns attributes of
	 * sublanguages and their calculationrule to a new attribute. The assigned
	 * can be accessed by the name of the new attribute.
	 *
	 * @attribute Name
	 *                   name of the new attribute
	 * @attribute Calculation
	 *                   list of all assigned attributes and their calculations
	 */
	AttributeConcretion = 
		Name "{" (calculation:Calculation)+ "}";

	/**
	 * A calculation consists of the grammar where the attribute is defined and
	 * the name of the attribute separated by a dot. The calculationclass must
	 * also be declared. The calculationclass is a reference to a java class.
	 *
	 * @attribute Name
	 *                name of the grammar and of the attribute separated by a dot
	 * @attribute CalculationClass
	 *                java class where the calculation rule is implemented 
	 */
	Calculation =
		((name:Name | name:"grammar" | name:"ast") ("." (name:Name | name:"grammar" | name:"ast"))*) ("=" calculationClass:ExternalAttributeType)?;
	
	astrule Calculation =
		method public String getGrammarname() {
			String name = new String();
			if (getNameList().size() > 1) {
				for (int i = 0; i < getNameList().size() - 1; i++) {
					name = name + getNameList().get(i);
					if (i < getNameList().size() - 2) {
						name = name + ".";
					}
				}
			}
			return name;
		}
		method public String getPackagename() {
			String name = new String();
			if (getNameList().size() > 2) {
				for (int i = 0; i < getNameList().size() - 2; i++) {
					name = name + getNameList().get(i);
					if (i < getNameList().size() - 3) {
						name = name + ".";
					}
				}
			}
			return name;
		}
		method public String getAttributename() {
			String name = new String();
			if (getNameList().size() > 0) {
				return getNameList().get(getNameList().size() - 1);
			}
			return "";
		};

	/**
	 * The definition of an attribute consists of kind, name and type.
	 *
	 * @attribute Kind
	 *                wether the attribute is inherited or synthesized
	 * @attribute Name
	 *                name of the attribute
	 * @attribute Type
	 *                type of the attribute, can be a rulereference or an
	 *                external type
	 */
	AttributeDefinition = 
	
    kind:["inh"|"syn"|"global"] Name ( ":" type:ReferenceInAttributes ("{" Overrides* "}" | ";") | "{" Overrides+ "}" );
  
    Overrides = rules:(Name || ",")+ ":" type:ReferenceInAttributes ";" ;
    
//-----------------------------------------------------------------------------
// copied (and marginally modified) from mc.grammar.Grammar	  
	interface ReferenceInAttributes;  
	
	RuleReferenceInAttribute implements ReferenceInAttributes =
		Name (iterated:["*"])? ;

	ExternalAttributeType implements ReferenceInAttributes = 
		"/" GenericAttributeType ;
	  
	astrule ExternalAttributeType =
		method public String getTypeName() {
			return "/"+ getGenericAttributeType().toString();	
		}
		method public boolean isExternal() {
			return true;
		};

	GenericAttributeType  = 
		(name:Name | name:"grammar" | name:"ast") ("." (name:Name | name:"grammar" | name:"ast") )* ("<" generic:GenericAttributeType ("," generic:GenericAttributeType)*  ">")? {a.setDimension(0);}  ("[""]"{a.setDimension(a.getDimension()+1);} )*;

	astrule GenericAttributeType =
		method public String toString() {
			return String.join(", ",getNameList());
		}
		dimension:int
		;
}
