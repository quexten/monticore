/* (c) https://github.com/MontiCore/monticore */
package de.monticore.expressions;

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

import de.monticore.expressions.*;

/**
 * This grammar defines Java specific class expressions like super,
 * this, type cast, etc.
 *
 * This grammar should only be included, when a mapping to Java is
 * intended and the full power of Java should be available in the
 * modelling language.
 *
 * There are also other kinds of expressions defined in the
 * grammars mentioned below. These expression definitions can savely be
 * composed if desired.
 *
 * The grammar has several extension points for types to be filled when used.
<<<<<<< HEAD
 * 
 * This grammar is part of a hierarchy of expressions, namely 
=======
 *
 * This grammar is part of a hierarchy of expressions, namely
>>>>>>> 4a140e4c5da5ecbc2be7c40ebe93937d04f19b8e
 * * expressions/ExpressionsBasis.mc4
 * * --  expressions/CommonExpressions.mc4
 * * --  --  expressions/JavaClassExpressions.mc4
 * * --  expressions/AssignmentExpressions.mc4
 * * --  expressions/BitExpressions.mc4
 * * --  expressions/OCLExpressions.mc4
 * * --  expressions/SetExpressions.mc4
 *
*/

component grammar JavaClassExpressions
          extends CommonExpressions {


  /*=================================================================*/

  /*
   * The following are several extension points that allow to fill in the
   * the desired type system:
   *  e.g. the complete type system of java (extending MCFullGenericType)
   *  or any smaller variant
  */

  // Types
  external ExtType;

  // Types including a void return type
  external ExtReturnType;

  // Type arguments
  external ExtTypeArgument;

  /*=================================================================*/

  PrimaryThisExpression implements Expression <320> =
    "this";

  ThisExpression implements Expression <280> =
    Expression "." "this";

  ArrayExpression implements Expression <250> =
    Expression "[" indexExpression:Expression "]";

  SuperExpression implements Expression <270> =
    Expression "." "super" SuperSuffix;

  GenericInvocationExpression implements Expression <260> =
    Expression "." PrimaryGenericInvocationExpression;

  // casting expression uses a type
  TypeCastExpression implements Expression <230> =
    "(" ExtType ")" Expression;

  PrimarySuperExpression implements Expression <330> =
    "super";

  CreatorExpression implements Expression <235> =
    "new" Creator;

  interface Creator ;

  AnonymousClass implements Creator
      =  ExtType Arguments;

  ArrayCreator implements Creator
      =   ExtType ArrayDimensionSpecifier;

  interface ArrayDimensionSpecifier ;

  ArrayDimensionByExpression implements ArrayDimensionSpecifier
      =   ("[" Expression "]")+ (dim:"[" "]")*
      ;

  /*=================================================================*/

  // access of class object uses a type
  ClassExpression implements Expression <360> =
    ExtReturnType "." "class";

  // generic invocation may specify type arguments
  PrimaryGenericInvocationExpression implements Expression <370> =
    "<"(ExtTypeArgument||",")+">" GenericInvocationSuffix;

  GenericInvocationSuffix
    =   ["super"] SuperSuffix
    |   ["this"] Arguments
    |   Name Arguments
    ;

  SuperSuffix
    =   Arguments
    |   "." ("<"(ExtTypeArgument||",")+">")? Name Arguments?
    ;

  /*=================================================================*/

  // instance of needs a type as argument
  InstanceofExpression implements Expression <140> =
    Expression "instanceof" ExtType;


}
