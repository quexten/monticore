/* (c) https://github.com/MontiCore/monticore */
package de.monticore.expressions;


import de.monticore.expressions.*;

/**
 * This grammar defines set expressions like union, intersection etc.
 * these operations are typical for a logic with set operations, like
 * UML's OCL.
 *
 * There are also other kinds of expressions defined in the
 * grammars mentioned below. These expression definitions can savely be
 * composed if desired.
 *
 * This grammar is part of a hierarchy of expressions, namely
 * * expressions/ExpressionsBasis.mc4
 * * --  expressions/CommonExpressions.mc4
 * * --  --  expressions/JavaClassExpressions.mc4
 * * --  expressions/AssignmentExpressions.mc4
 * * --  expressions/BitExpressions.mc4
 * * --  expressions/OCLExpressions.mc4
 * * --  expressions/SetExpressions.mc4
 *
*/

@Deprecated
component grammar SetExpressions
          extends ExpressionsBasis {

  /*=================================================================*/

// TODO: Unterschied IsInExpression und SetInExpression unklar:
// erklären oder Umbauen

  IsInExpression implements Expression <190> =
      elem:Expression
      operator:"isin"
      set:Expression;

  SetInExpression implements Expression <190> =
      elem:Expression
      operator:"in"
      set:Expression;

// TODO: Prioritäten konfligieren mit denen aus Common Expressions: anpassen auf
// sinnvollere Werte

  /*=================================================================*/

  UnionExpressionInfix implements Expression <180> =
      left:Expression
      operator:"union"
      right:Expression;

  IntersectionExpressionInfix implements Expression <180> =
      left:Expression
      operator:"intersect"
      right:Expression;

  // We do not introduce a special operator for the 
  // difference, because the binary "-" operator can here be used as well

  /*=================================================================*/

  // sets of sets united (i.e. flattened) and intersected
  UnionExpressionPrefix implements Expression <170> =
      "union"  set:Expression;

  IntersectionExpressionPrefix implements Expression <170> =
      "intersect"  set:Expression;

  /*=================================================================*/

  // Logical expressions extended to sets of arguments
  SetAndExpression implements Expression <130> =
      "setand" set:Expression;

  SetOrExpression implements Expression <130> =
      "setor" set:Expression;

}
