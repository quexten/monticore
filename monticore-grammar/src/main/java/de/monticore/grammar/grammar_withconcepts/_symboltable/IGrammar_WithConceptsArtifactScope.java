/* generated from model Grammar_WithConcepts */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.grammar.grammar_withconcepts._symboltable;

import de.monticore.grammar.grammar._symboltable.MCGrammarSymbol;
import de.se_rwth.commons.logging.Log;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public interface IGrammar_WithConceptsArtifactScope extends IGrammar_WithConceptsArtifactScopeTOP {

  @Deprecated
  // Remove this class if the qualifying is done by the visitor
  @Override
  default
  public List<MCGrammarSymbol> continueMCGrammarWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> predicate) {
    /* generated by template _symboltable.iartifactscope.ContinueWithEnclosingScope4ArtifactScope*/

    final List<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> result = new ArrayList<>();

    if (checkIfContinueWithEnclosingScope(foundSymbols) && getEnclosingScope() != null) {
      if (!(getEnclosingScope() instanceof de.monticore.grammar.grammar_withconcepts._symboltable.IGrammar_WithConceptsGlobalScope)) {
        Log.warn("0xA1039 The artifact scope " + (isPresentName() ? getName() : "") + " should have a global scope as enclosing scope or no "
                + "enclosing scope at all.");
      }
      final Set<String> potentialQualifiedNames = calculateQualifiedNames(name, getPackageName(), getImportsList());

      for (final String potentialQualifiedName : potentialQualifiedNames) {
        final List<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> resolvedFromEnclosing = getEnclosingScope().resolveMCGrammarMany(foundSymbols,
                potentialQualifiedName, modifier, predicate);
        foundSymbols = foundSymbols || resolvedFromEnclosing.size() > 0;
        result.addAll(resolvedFromEnclosing);
      }
    }
    return result;
  }
}
